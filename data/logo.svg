<svg xmlns="http://www.w3.org/2000/svg" width="69" height="50" viewBox="0 0 1200 867" version="1.1"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><path d="" stroke="none" fill="#f88c2c" fill-rule="evenodd"/><path d="M 955 172.060 C 955 273.734, 954.911 279.175, 953.250 278.454 C 950.328 277.186, 926.663 271.255, 921.931 270.605 C 919.494 270.270, 916.375 269.770, 915 269.493 C 898.189 266.106, 864.439 265.393, 844 267.994 C 818.798 271.200, 791.586 278.439, 769 287.944 C 764.875 289.681, 759.700 291.835, 757.500 292.732 C 751.442 295.203, 722.721 310.025, 720.921 311.610 C 720.053 312.374, 719.059 313, 718.713 313 C 716.638 313, 684.817 334.249, 672 344.194 C 667.875 347.395, 663.375 350.867, 662 351.909 C 653.741 358.171, 640.658 368.879, 634.125 374.725 C 629.961 378.451, 624.292 383.518, 621.527 385.986 C 613.089 393.515, 595.081 410.883, 583.939 422.237 C 578.131 428.157, 573.068 433, 572.689 433 C 572.310 433, 572 432.475, 572 431.833 C 572 428.585, 551.021 389.035, 548.838 388.167 C 548.377 387.983, 548 387.371, 548 386.806 C 548 385.150, 538.374 372.294, 529.094 361.555 C 516.344 346.801, 506.174 336.784, 494.500 327.484 C 491.750 325.293, 489.275 323.239, 489 322.919 C 487.918 321.662, 468.105 308.232, 461.500 304.278 C 447.216 295.728, 408.838 279, 403.507 279 C 402.643 279, 400.345 278.335, 398.400 277.523 C 393.156 275.332, 372.932 271.260, 358.393 269.467 C 331.017 266.093, 298.817 267.216, 272 272.481 C 261.971 274.450, 257.662 275.418, 251.750 277.031 L 245 278.873 244.936 263.686 C 244.827 237.525, 242.979 219.718, 238.432 201 C 235.473 188.820, 231.141 174.922, 229.876 173.550 C 229.394 173.027, 229 172.057, 229 171.394 C 229 170.731, 226.680 165.309, 223.844 159.344 C 209.630 129.447, 188.060 105.770, 160.784 90.121 C 152.686 85.475, 138.988 79.287, 132 77.117 C 109.919 70.261, 92.282 67.113, 71.250 66.275 L 57 65.706 57 434.007 L 57 802.308 72.750 801.671 C 116.179 799.916, 151.988 787.821, 180.917 765.135 L 183.335 763.239 196.417 769.897 C 229.424 786.694, 252.726 794.162, 291 800.209 C 299.458 801.546, 344.741 801.916, 355.398 800.736 C 377.418 798.298, 397.078 793.654, 419.698 785.550 C 424.846 783.705, 442.125 776.024, 443.500 774.968 C 444.050 774.546, 448.325 772.267, 453 769.903 C 474.080 759.244, 511.918 733.738, 526.568 720.311 C 528.255 718.765, 532.302 715.250, 535.562 712.500 C 538.822 709.750, 543.967 705.250, 546.995 702.500 C 555.900 694.413, 600.633 649.470, 611.952 637.237 C 617.684 631.042, 622.668 626.317, 623.027 626.737 C 623.386 627.157, 624.247 629.075, 624.941 631 C 628.523 640.940, 635.888 656.646, 642.105 667.600 C 647.194 676.567, 659.580 695.048, 664.154 700.500 C 665.076 701.600, 667.476 704.525, 669.486 707 C 676.462 715.591, 694.558 733.359, 705.177 742.043 C 738.460 769.263, 778.301 788.192, 820.500 796.837 C 838.767 800.579, 849.531 801.500, 875 801.500 C 893.560 801.500, 909.997 800.380, 919 798.501 C 920.375 798.214, 922.850 797.756, 924.500 797.483 C 940.112 794.900, 979.716 782.282, 985.500 778.049 C 986.050 777.646, 988.438 776.564, 990.806 775.644 C 993.174 774.724, 998.349 772.122, 1002.306 769.862 C 1006.263 767.601, 1010.988 764.901, 1012.807 763.861 L 1016.113 761.970 1021.807 766.307 C 1051.343 788.802, 1084.062 799.611, 1128.776 801.643 L 1143.052 802.291 1142.685 516.396 C 1142.435 321.197, 1141.984 228.755, 1141.262 225 C 1140.681 221.975, 1139.918 217.475, 1139.566 215 C 1139.214 212.525, 1137.999 206.675, 1136.867 202 C 1135.735 197.325, 1134.625 192.526, 1134.400 191.335 C 1133.430 186.190, 1126.476 167.700, 1122.027 158.436 C 1117.588 149.191, 1108.504 134.087, 1104.256 128.888 C 1094.840 117.363, 1089.673 112.072, 1078.800 102.822 C 1052.366 80.334, 1008.737 65.767, 965.750 65.078 L 955 64.905 955 172.060 M 317.500 452.745 C 310.237 453.338, 296.988 456.565, 291.196 459.150 C 278.092 465.001, 268.195 473.220, 259.938 485.110 C 252.831 495.343, 249.688 502.858, 246.918 516.240 C 243.643 532.061, 244.899 550.310, 250.361 566.280 C 255.883 582.420, 269.091 598.479, 283.450 606.509 C 290.026 610.187, 301.291 614.474, 307.744 615.755 C 315.064 617.207, 342.022 616.512, 350 614.665 C 382.577 607.122, 411.486 590.755, 449 558.617 C 469.343 541.190, 521.590 489, 518.694 489 C 518.391 489, 517.548 489.579, 516.821 490.286 C 516.095 490.994, 513.700 492.906, 511.500 494.536 C 509.300 496.166, 507.009 497.950, 506.408 498.500 C 505.808 499.050, 503.826 500.625, 502.004 502 C 500.182 503.375, 497.073 505.793, 495.095 507.373 C 482.006 517.832, 448.545 542, 447.154 542 C 446.611 542, 446.017 542.375, 445.833 542.833 C 445.466 543.752, 434.350 551, 433.309 551 C 432.951 551, 431.947 551.636, 431.079 552.413 C 429.047 554.231, 401.726 568.059, 401.201 567.535 C 400.983 567.317, 401.699 564.744, 402.792 561.819 C 409.071 545.012, 408.001 517.833, 400.409 501.333 C 389.587 477.812, 367.636 460.008, 342.714 454.537 C 335.896 453.040, 324.127 452.204, 317.500 452.745 M 863.500 452.759 C 834.490 454.265, 799.858 466.500, 767.940 486.520 C 756.214 493.875, 733.655 511.468, 720.094 523.835 C 711.516 531.658, 693.963 549, 694.624 549 C 694.825 549, 701.202 545.063, 708.796 540.250 C 726.957 528.741, 725.574 529.590, 733 525.389 C 742.217 520.175, 770.464 505.874, 777 503.111 C 783.677 500.289, 800.940 494, 802.009 494 C 802.433 494, 801.285 497.488, 799.457 501.750 C 785.230 534.936, 795.031 575.665, 822.672 598.216 C 839.800 612.190, 858.001 618.003, 880.611 616.719 C 892.021 616.072, 892.794 615.925, 903.500 612.394 C 939.255 600.601, 961.157 559.710, 953.524 519 C 951.596 508.715, 951.486 508.296, 948.929 501.500 C 943.416 486.848, 933.110 473.912, 920.398 465.689 C 904.637 455.493, 887.196 451.530, 863.500 452.759" stroke="none" fill="#f48c2c" fill-rule="evenodd"/></svg>